@inject IDeleteInventoryUseCase DeleteInventoryUseCase;
@inject NavigationManager NavigationManager;

@if (this.Inventory is not null)
{
    <tr>
        <td>@Inventory.Name</td>
        <td>@Inventory.Quantity</td>
        <td>@Inventory.Price.ToString("c")</td>
        <td>
            <a class="btn btn-light"
               href="/editInventory/@Inventory.Id">
                Edit
            </a>
        </td>
        <td>
            <EditForm Enhance="true" Model="Inventory" 
                FormName="@($"form-delete-inventory-{@Inventory.Id}")"
                      OnValidSubmit="() => DeleteInventory(Inventory.Id)">
                <button type="submit" class="btn btn-light">Delete</button>
            </EditForm>
        </td>
    </tr>
}

@code {
    [Parameter]
    public Inventory? Inventory { get; set; }

    private async Task DeleteInventory(int invId)
    {
        await DeleteInventoryUseCase.ExecuteAsync(invId);
        NavigationManager.Refresh();
    }
}
